{
  "name": "Memleax",
  "tagline": "detects memory leak of running process",
  "body": "## memleax\r\n\r\n`memleax` detects memory leak of a *running* process.\r\n\r\n\r\n## why write this\r\n\r\nOnce I met a memory leak problem in production environment.\r\nThe process began memory leak after long-time running. If using current\r\nmemory debuggers, such as `Valgrind`, I have to restart the target process\r\nand wait for several days again. Besides it impacts the target process\r\nmuch for several days, which is not good for production environment.\r\n\r\nSo I need a tool to debug a running process without restarting it.\r\nI searched the internet but didn't find one. Then I wrote such a tool myself.\r\n\r\nHope this is useful for others.\r\n\r\n\r\n## how it works\r\n\r\n`memleax` attachs a running process, hooks memory allocate/free APIs,\r\nrecords all memory blocks, and reports the blocks which live longer\r\nthan 5 seconds (you can change this time by -e option) in real time.\r\n\r\nIt is very *convenient* to use, and suitable for production environment.\r\nThere is no need to recompile the program or restart the target process.\r\nYou run `memleax` to monitor the target process, wait for the real-time memory\r\nleak report, and then kill it (e.g. by Ctrl-C) to stop monitoring.\r\n\r\nNOTE: Since `memleax` does not run along with the whole life of target\r\nprocess, it assumes the long-live memory blocks are memory leak.\r\nDownside is you have to set the expire threshold by -e option according\r\nto your scenarios; while the upside is the memory allocation for process\r\ninitialization is skipped, besides of the convenience.\r\n\r\n\r\n## performace impact\r\n\r\nBecause target progress's each memory allocation/free API invokes a TRAP, the\r\nperformance impact depends on how often the target program calls memory\r\nAPIs.\r\nFor example, it impacts lightly to nginx with HTTP, while heavily with HTTPS,\r\nbecause OpenSSL calls malloc seriously.\r\n\r\nAlthough performance impact is worthy of consideration, since `memleax` is\r\nrun to attach the target progress only when you certain it is in memory leak,\r\nand stopped after real-time memory leak report, so it is not need to attach\r\nthe target progress for long time.\r\n\r\n\r\n## difference with Valgrind\r\n\r\n+ `Valgrind` starts target process, while `memleax` attachs a running process;\r\n\r\n+ `Valgrind` gives memory leak report on quiting, while `memleax` assumes\r\nthat long-living memory blocks are leaks, so it reports in real time;\r\n\r\n+ `Valgrind` runs target process on its virtual CPU, which makes it slow.\r\nWhile `memleax` hooks memory APIs, which *maybe* less slow, if the target process\r\ncall memory APIs not often.\r\n\r\n+ `Valgrind` debugs kinds of memory bugs, while `memleax` is lightweight and\r\nonly detects memory leak.\r\n\r\nIn summary, I think `Valgrind` is more powerful, while `memleax` is more\r\nconvenient and suitable for production environment.\r\n\r\n\r\n## environment\r\n\r\n+ GNU/Linux-x86_64, tested on CentOS 7.2 and Ubuntu 16.04\r\n+ FreeBSD-amd64, tested on FreeBSD 10.3\r\n\r\n\r\n## requirement\r\n\r\n+ libunwind\r\n+ libdwarf, if you do not have this, set `--disable-libdwarf` to `configure` to\r\n  disable it, as a result you will not see file name and line number in backtrace.\r\n+ libelf, on GNU/Linux, while FreeBSD has libelf already.\r\n\r\n\r\n## usage\r\n\r\n### start\r\n\r\nTo debug a running process, run:\r\n\r\n    $ memleax [options] <target-pid>\r\n\r\nthen `memleax` begins to monitor the target process, and report memory leak in real time.\r\n\r\n### wait and check the report\r\n\r\nThe memory blocks live longer than the threshold, are showed as:\r\n\r\n    CallStack[3]: memory expires with 101 bytes, backtrace:\r\n        0x00007fd322bd8220  malloc()+0\r\n        0x000000000040084e  foo()+14  foo.c:12\r\n        0x0000000000400875  bar()+37  xxxxx.c:20\r\n        0x0000000000400acb  main()+364  test.c:80\r\n\r\n`CallStack[3]` is the ID of CallStack where memory leak happens.\r\n\r\nThe backtrace is showed only on the first time, while it only shows the\r\nID and counter if expiring again:\r\n\r\n    CallStack[3]: memory expires with 101 bytes, 2 times again\r\n\r\nIf the expired memory block is freed later, it shows:\r\n\r\n    CallStack[6]: expired-memory frees after 10 seconds\r\n\r\nIf there are too many expired-memory-blocks are freed on one CallStack,\r\nthis CallStack will not be showed again:\r\n\r\n    Warning: too many expired-free at CallStack[6]. will not show this CallStack later\r\n\r\nWhen you think you have found the answer, stop the debug.\r\n\r\n### stop\r\n\r\n`memleax` stops monitoring and quits on:\r\n\r\n* you stop it, by Ctrl-C or kill,\r\n* the target process quits, or\r\n* too many leaks on one CallStack.\r\n\r\nAfter quiting, it also gives statistics for the CallStacks with memory leak:\r\n\r\n    CallStack[3]: may-leak=20 (2020 bytes)\r\n        expired=20 (2020 bytes), free_expired=0 (0 bytes)\r\n        alloc=20 (2020 bytes), free=0 (0 bytes)\r\n        freed memory live time: min=0 max=0 average=0\r\n        un-freed memory live time: max=20\r\n        0x00007fd322bd8220  malloc()+0\r\n        0x000000000040084e  foo()+14  foo.c:12\r\n        0x0000000000400875  bar()+37  xxxxx.c:20\r\n        0x0000000000400acb  main()+364  test.c:80\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}